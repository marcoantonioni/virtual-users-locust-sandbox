

??? Riprovare con seconda demo UnitTest
- verificare come aggiornare utenti in Groups per app appena creata (restart ? api rest ?)

- rivedere UT con scenari determinati payload/assert managers 
-- test 1: voti predefiniti per nome
-- test 2: promozione predefinita per nome ma voti variabili

- rivedere nomi processi app test

- controllare apici su nomi files 

- versione containerizzata


#----------------------------------
Unit Test

- unit test scenario 1 o più istanze processo
  VUSUnitTestExample1

  -- payload manager
  --- creazione istanza processo (0/1 payload)
  ---- se avvio con payload input definire attributo chiave che identifica univocamente l'istanza di processo (key per assertion puntuale)
  ---- se avvio senza payload input verificare se/come un attributo può diventare key univoca per assertion puntuale
  --- completamento task
  ---- logica e valori di completamento generati da codice custom

Configurazione ambiente run

UNIT TEST 1
 baw-vu-cfg-ut1.conf
 creds-cfg-ut1.csv
 env-ut1.properties
 teams-vu-cfg-ut1.csv
 groups-vu-cfg-ut1.csv
 TS-UT1.csv
 US-TS-UT1.csv


#----------------------------------
https://snyk.io/advisor/search?source=python&q=locust

#----------------------------------

oc get secret -n cp4ba icp4adeploy-openldap-customldif -o jsonpath='{.data.ldap_user\.ldif}' | base64 -d

# openldap phpadmin (vm bamoe)
https://github.com/marcoantonioni/openldap-openshift/blob/main/phpldapadmin.md


#=====================================
# avvio Locust da programma Python
#=====================================
import os, sys
from locust.main import main as mainLocust

if __name__ == "__main__":
    mainLocust()

# python ./runlocust.py --config=./configurations/baw-vu-cfg-1.conf

#=====================================
# debug http
#=====================================
def patch_send():
    old_send = http.client.HTTPConnection.send
    def new_send(self, data):
        print(f'{"-"*9} BEGIN REQUEST {"-"*9}')
        print(data.decode('utf-8').strip())
        print(f'{"-"*10} END REQUEST {"-"*10}')
        return old_send(self, data)
    http.client.HTTPConnection.send = new_send
patch_send()


#=====================================
# Onboarding utenti
# python ./_testUserOnboard.py -e ./configurations/env1.properties -u vuxuser5 -d vuxdomain1
#=====================================

TNS=cp4ba-starter

# credenziali pak: admin 
oc get secret platform-auth-idp-credentials -n ${TNS} -o jsonpath='{.data.admin_password}' | base64 -d && echo
W1BcbRumpJaLZ0msHFzGzjAxSMa0eL6a

# per Access Control con utenza admin
# https://cpd-cp4ba-starter.



TNS=cp4ba-starter

# IAM token

iamadmin=$(oc get secret -n ${TNS} platform-auth-idp-credentials -o jsonpath='{.data.admin_username}' | base64 -d)
iampass=$(oc get secret -n ${TNS} platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 -d)

echo $iamadmin $iampass

iamhost=https://$(oc get route -n ${TNS} cp-console -o jsonpath="{.spec.host}")
iamaccesstoken=$(curl -sk -X POST -H "Content-Type: application/x-www-form-urlencoded;charset=UTF-8" -d "grant_type=password&username=$iamadmin&password=$iampass&scope=openid" $iamhost/idprovider/v1/auth/identitytoken | jq -r .access_token)

echo $iamaccesstoken


# ZEN token

zenhost=https://$(oc get route -n ${TNS} cpd -o jsonpath="{.spec.host}")
echo $zenhost

zentoken=$(curl -sk "$zenhost/v1/preauth/validateAuth" -H "username:$iamadmin" -H "iam-token: $iamaccesstoken" | jq -r .accessToken)
echo $zentoken


# BULK OP

payload_name=onboard-user.json
onb_dom=vuxdomain1
onb_user=vuxuser3
echo '[{"username":"'$onb_user'","displayName":"'$onb_user'","email":"'$onb_user'@vuxdomain.org","authenticator":"external","user_roles":["zen_user_role"],"misc":{"realm_name":"'$onb_dom'","extAttributes":{}}}]' > ./${payload_name}

curl -sk -H "Authorization: Bearer $zentoken" -H "Content-Type: application/json" -X POST $zenhost/usermgmt/v1/user/bulk -d @./${payload_name} | jq .


{
  "result": [
    {
      "uid": "1000331027",
      "username": "vuxuser3",
      "displayName": "vuxuser3",
      "success": "true",
      "message": "User created"
    }
  ],
  "_messageCode_": "Success",
  "message": "Success"
}
